#foreach ($type in $primitiveTypes)
#set ($valueType = $type.expression)
#set ($stem = $type.target().stem)

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors for builder start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} value
   * @protected
   * @return {BUILDER}
   */
  internal_add${stem}Element(fieldNumber, value) {
    this.kernel_.getMutableRepeated${stem}Field(fieldNumber).add(value);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!Iterable<!${valueType}>} values
   * @protected
   * @return {BUILDER}
   */
  internal_addAll${stem}Elements(fieldNumber, values) {
    // TODO(b/170261331): Extract a local var for getMutableRepeated${stem}Field
    // once it doesn't matter if the field is initialized.
    for (const value of values) {
      this.kernel_.getMutableRepeated${stem}Field(fieldNumber).add(value);
    }
    return this;
  }


  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} value
   * @protected
   * @return {BUILDER}
   */
  internal_set${stem}Field(fieldNumber, value) {
    this.kernel_.set${stem}Field(fieldNumber, value);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} value
   * @protected
   * @return {BUILDER}
   */
  internal_set${stem}FieldIgnoreDefaultProto3(fieldNumber, value) {
    this.kernel_.set${stem}FieldIgnoreDefaultProto3(fieldNumber, value);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!Iterable<!${valueType}>} value
   * @protected
   * @return {BUILDER}
   */
  internal_set${stem}Iterable(fieldNumber, value) {
    this.kernel_.getMutableRepeated${stem}Field(fieldNumber).setIterable(value);
    return this;
  }


  /**
   * @param {number} fieldNumber
   * @param {number} elementIndex
   * @param {!${valueType}} value
   * @protected
   * @return {BUILDER}
   */
  internal_set${stem}Element(fieldNumber, elementIndex, value) {
    this.kernel_.getMutableRepeated${stem}Field(fieldNumber)
        .set(elementIndex, value);
    return this;
  }


  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors for builder stop
  //
  //////////////////////////////////////////////////////////////////////////////

#end

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors for builder start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {!InternalMessage|!InternalMessage.Builder} value
   * @protected
   * @return {BUILDER}
   */
  internal_addMessageElement(fieldNumber, value) {
    if (value instanceof Message.Builder) {
      value = value.build();
    }
    this.kernel_.getMutableRepeatedMessageField(fieldNumber).add(value.kernel_);
    return this;
  }


  /**
   * @param {number} fieldNumber
   * @param {!Iterable<!InternalMessage|!InternalMessage.Builder>} values
   * @protected
   * @return {BUILDER}
   */
  internal_addAllMessageElements(fieldNumber, values) {
    for (const value of values) {
      this.internal_addMessageElement(fieldNumber, value);
    }
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!InternalMessage|!InternalMessage.Builder} value
   * @protected
   * @return {BUILDER}
   */
  internal_setMessageField(fieldNumber, value) {
    if (value instanceof Message.Builder) {
      value = value.build();
    }
    this.kernel_.setMessageField(fieldNumber, value.kernel_);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!Iterable<!InternalMessage>} values
   * @protected
   * @return {BUILDER}
   */
  internal_setMessageIterable(fieldNumber, values) {
    const kernels = [];
    for (const value of values) {
      kernels.push(value.kernel_);
    }
    this.kernel_.getMutableRepeatedMessageField(fieldNumber)
        .setIterable(kernels);
    return this;
  }


  /**
   * @param {number} fieldNumber
   * @param {number} elementIndex
   * @param {!InternalMessage|!InternalMessage.Builder} value
   * @protected
   * @return {BUILDER}
   */
  internal_setMessageElement(fieldNumber, elementIndex, value) {
    if (value instanceof Message.Builder) {
      value = value.build();
    }
    this.kernel_.getMutableRepeatedMessageField(fieldNumber)
        .set(elementIndex, value.kernel_);
    return this;
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors for builder stop
  //
  //////////////////////////////////////////////////////////////////////////////

#foreach ($key in $mapKeyTypes)
#set ($keyType = $key.expression)
#set ($keyStem = $key.target().stem)

#foreach ($value in $mapValueTypes)
#set ($valueType = $value.expression)
#set ($valueStem = $value.target().stem)

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=${valueStem}) start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {!${keyType}} key
   * @protected
   * @return {BUILDER}
   */
  internal_removeMap${keyStem}Key${valueStem}Value(fieldNumber, key) {
    this.kernel_.getMutableMapView${keyStem}Key${valueStem}Value(fieldNumber)
        .remove(key);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!${keyType}} key
   * @param {!${valueType}} value
   * @protected
   * @return {BUILDER}
   */
  internal_putMap${keyStem}Key${valueStem}Value(fieldNumber, key, value) {
    this.kernel_.getMutableMapView${keyStem}Key${valueStem}Value(fieldNumber)
        .set(key, value);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!Map<!${keyType}, !${valueType}>|!MapView<!${keyType}, !${valueType}>} values
   * @protected
   * @return {BUILDER}
   */
  internal_putAllMap${keyStem}Key${valueStem}Value(fieldNumber, values) {
    const valueMap =
      this.kernel_.getMutableMapView${keyStem}Key${valueStem}Value(fieldNumber);
    values.forEach((value, key) => valueMap.set(key, value));
    return this;
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=${valueStem}) stop
  //
  //////////////////////////////////////////////////////////////////////////////

#end

#set ($valueType = "INVALID")
#set ($valueStem = "INVALID")

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=Message) start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {!${keyType}} key
   * @param {function(new:InternalMessage, !Array<*>)} ctor
   * @protected
   * @return {BUILDER}
   */
  internal_removeMap${keyStem}KeyMessageValue(fieldNumber, key, ctor) {
    this.kernel_.getMutableMapView${keyStem}KeyMessageValue(
        fieldNumber, ctor, (message) => message.kernel_)
        .remove(key);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!${keyType}} key
   * @param {!InternalMessage} value
   * @param {function(new:InternalMessage, !Array<*>)} ctor
   * @protected
   * @return {BUILDER}
   */
  internal_putMap${keyStem}KeyMessageValue(fieldNumber, key, value, ctor) {
    this.kernel_.getMutableMapView${keyStem}KeyMessageValue(
        fieldNumber, ctor, kernelProvider)
        .set(key, value);
    return this;
  }

  /**
   * @param {number} fieldNumber
   * @param {!Map<!${keyType}, !InternalMessage>|!MapView<!${keyType}, !InternalMessage>} values
   * @param {function(new:InternalMessage, !Array<*>)} ctor
   * @protected
   * @return {BUILDER}
   */
  internal_putAllMap${keyStem}KeyMessageValue(fieldNumber, values, ctor) {
    const valueMap = this.kernel_.getMutableMapView${keyStem}KeyMessageValue(
          fieldNumber, ctor, kernelProvider);
    values.forEach((value, key) => valueMap.set(key, value));
    return this;
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=Message) stop
  //
  //////////////////////////////////////////////////////////////////////////////

#end
