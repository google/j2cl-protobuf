#foreach ($type in $primitiveTypes)
#set ($valueType = $type.expression)
#set ($stem = $type.target().stem)

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @return {!${valueType}}
   */
  get${stem}Field(fieldNumber) {
    return this.getField_(fieldNumber, FieldAccessor.get${stem});
  }

  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} defaultValue
   * @return {!${valueType}}
   */
  get${stem}FieldWithDefault(fieldNumber, defaultValue) {
    return this.getFieldWithDefault_(
        fieldNumber, defaultValue, FieldAccessor.get${stem}WithDefault);
  }

  /**
   * @param {number} fieldNumber
   * @return {!ListView<!${valueType}>}
   */
  getRepeated${stem}Field(fieldNumber) {
    return this.getListView_(fieldNumber, FieldAccessor.get${stem});
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors stop
  //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors for builder start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} value
   */
  set${stem}Field(fieldNumber, value) {
    this.setField_(fieldNumber, value, FieldAccessor.set${stem});
  }

  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} value
   */
  set${stem}FieldIgnoreDefaultProto3(fieldNumber, value) {
    this.setFieldIgnoreDefaultProto3(
      fieldNumber, value, FieldAccessor.is${stem}Proto3Default, FieldAccessor.set${stem});
  }

  /**
   * @param {number} fieldNumber
   * @return {!InternalMutableListView<!${valueType}>}
   */
  getMutableRepeated${stem}Field(fieldNumber) {
    return this.getMutableListView_(fieldNumber, FieldAccessor.set${stem});
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors for builder stop
  //
  //////////////////////////////////////////////////////////////////////////////

#end

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {function(new:T, !Array<*>)} ctor
   * @template T
   * @return {T}
   */
  getMessageField(fieldNumber, ctor) {
    const instanceCreator = data => JspbKernel.fromArray(ctor, data);
    return this.getField_(
        fieldNumber, (a, i) => FieldAccessor.getMessage(a, i, instanceCreator));
  }

  /**
   * @param {number} fieldNumber
   * @param {function(new:T, !Array<*>)} ctor
   * @template T
   * @return {!ListView<T>}
   */
  getRepeatedMessageField(fieldNumber, ctor) {
    const instanceCreator = data => JspbKernel.fromArray(ctor, data);
    return this.getListView_(
        fieldNumber, (a, i) => FieldAccessor.getMessage(a, i, instanceCreator));
  }

  /**
   * @param {number} fieldNumber
   * @param {function(!Object<number, *>):!JspbKernel} kernelFactory
   * @return {!JspbKernel}
   */
  getJspbKernelField(fieldNumber, kernelFactory) {
    return this.getField_(
        fieldNumber, (a, i) => FieldAccessor.getMessage(a, i, kernelFactory));
  }

  /**
   * @param {number} fieldNumber
   * @param {function(!Object<number, *>):!JspbKernel} kernelFactory
   * @return {!ListView<!JspbKernel>}
   */
  getRepeatedJspbKernelField(fieldNumber, kernelFactory) {
    return this.getListView_(
        fieldNumber, (a, i) => FieldAccessor.getMessage(a, i, kernelFactory));
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors stop
  //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors for builder start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @return {!InternalMutableListView<!JspbKernel>}
   */
  getMutableRepeatedMessageField(fieldNumber) {
    return this.getMutableListView_(fieldNumber, messageFieldWriter);
  }

  /**
   * @param {number} fieldNumber
   * @param {!JspbKernel} value
   */
  setMessageField(fieldNumber, value) {
    this.setField_(fieldNumber, value, messageFieldWriter);
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors for builder stop
  //
  //////////////////////////////////////////////////////////////////////////////


#foreach ($key in $mapKeyTypes)
#set ($keyType = $key.expression)
#set ($keyStem = $key.target().stem)

#foreach ($value in $mapValueTypes)
#set ($valueType = $value.expression)
#set ($valueStem = $value.target().stem)

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors with (key=${keyStem}, value=${valueStem}) start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @return {!MapView<!${keyType}, !${valueType}>}
   */
  getMapView${keyStem}Key${valueStem}Value(fieldNumber) {
    return this.getMapView_(
        fieldNumber, FieldAccessor.get${keyStem}, FieldAccessor.set${keyStem},
        FieldAccessor.get${valueStem}, FieldAccessor.set${valueStem});
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors with (key=${keyStem}, value=${valueStem}) stop
  //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=${valueStem}) start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @return {!InternalMutableMapView<!${keyType}, !${valueType}>}
   */
  getMutableMapView${keyStem}Key${valueStem}Value(fieldNumber) {
    return this.getMutableMapView_(
        fieldNumber, FieldAccessor.get${keyStem}, FieldAccessor.set${keyStem},
        FieldAccessor.get${valueStem}, FieldAccessor.set${valueStem});
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=${valueStem}) stop
  //
  //////////////////////////////////////////////////////////////////////////////

#end

#set ($valueType = "INVALID")
#set ($valueStem = "INVALID")

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors with (key=${keyStem}, value=Message) start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {function(new:T, !Array<*>)} ctor
   * @param {function(T):!JspbKernel} kernelProvider
   * @return {!MapView<!${keyType}, T>}
   * @template T
   */
  getMapView${keyStem}KeyMessageValue(fieldNumber, ctor, kernelProvider) {
    const instanceCreator = data => JspbKernel.fromArray(ctor, data);
    return this.getMapView_(
        fieldNumber, FieldAccessor.get${keyStem}, FieldAccessor.set${keyStem},
        (a, i) => FieldAccessor.getMessage(a, i, instanceCreator),
        (dataToUpdate, fieldNumber, value) => messageFieldWriter(
            dataToUpdate, fieldNumber, kernelProvider(value)));
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors with (key=${keyStem}, value=Message) stop
  //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=Message) start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {function(new:T, !Array<*>)} ctor
   * @param {function(T):!JspbKernel} kernelProvider
   * @return {!InternalMutableMapView<!${keyType}, T>}
   * @template T
   */
  getMutableMapView${keyStem}KeyMessageValue(fieldNumber, ctor, kernelProvider) {
    const instanceCreator = data => JspbKernel.fromArray(ctor, data);
    return this.getMutableMapView_(
        fieldNumber, FieldAccessor.get${keyStem}, FieldAccessor.set${keyStem},
        (a, i) => FieldAccessor.getMessage(a, i, instanceCreator),
        (dataToUpdate, fieldNumber, value) => messageFieldWriter(
            dataToUpdate, fieldNumber, kernelProvider(value)));
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Map accessors for builder with (key=${keyStem}, value=Message) stop
  //
  //////////////////////////////////////////////////////////////////////////////

#end
