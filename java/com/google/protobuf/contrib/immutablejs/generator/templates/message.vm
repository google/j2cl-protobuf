/**
 * @fileoverview
 * @suppress {lateProvide}
 *
 * Generated code DO NOT EDIT
 * Generated by //java/com/google/protobuf/contrib/immutablejs/generator:ImmutableJspbCompiler
 */
goog.module('$descriptor.type.moduleName');

const proto_im_InternalMessage = goog.require('proto.im.internal.InternalMessage');
const proto_im_Message = goog.require('proto.im.Message');
#foreach ($import in ${descriptor.getImports()})
const $import.importName = goog.require('$import.moduleName');
#end

#foreach($message in $descriptor.allMessages)
#set ($messageName = $message.type.localName)
/**
 * $!message.protoFileComments
 * @struct
 * @final
 * @extends {proto_im_InternalMessage<!${messageName}, !${messageName}.Builder>}
#if ($message.isDeprecated())
 * @deprecated
#end
 */
#if ($message.type.isTopLevel())
class $messageName extends proto_im_InternalMessage {
#else
$messageName = class $message.type.name extends proto_im_InternalMessage {
#end

  /**
   * Parses the json as a message of type $messageName.
   * @param {string} json
   * @return {!${messageName}}
   */
  static parse(json) {
    return proto_im_InternalMessage.parseBase($messageName, json);
  }

  /**
   * Returns a builder for this message.
   * @param {!${messageName}=} message
   * @return {!${messageName}.Builder}
   */
  static newBuilder(message = ${messageName}.getDefaultInstance()) {
    return new ${messageName}.Builder(message);
  }

  /**
   * Returns the default instance for this message.
   * @return {!${messageName}}
   */
  static getDefaultInstance() {
    return proto_im_InternalMessage.getDefaultInstanceForMessage(
        $messageName);
  }

  /**
   * @param {!Array<?>} data The array holding protobuf data.
   * @private
   */
  constructor(data) {
    super(data, $message.pivot, $message.messageId);
  }

  /**
   * Constructs a builder initialized with the current message.
   * @return {!${messageName}.Builder}
   * @override
   */
  toBuilder() {
    return new ${messageName}.Builder(this);
  }

#foreach($field in $message.fields)
#parse ("$field.template")

#end
#foreach($oneOfDescriptor in $message.oneOfs)
  /**
   * @return {!$oneOfDescriptor.localTypeName}
   */
  get${oneOfDescriptor.simpleName}() {
#foreach ($field in $oneOfDescriptor.fields)
    if (this.internal_hasField($field.number)) {
      return ${oneOfDescriptor.localTypeName}.${field.name};
    }
#end
    return ${oneOfDescriptor.localTypeName}.${oneOfDescriptor.defaultOneOfEntry};
  }

#end
}
#foreach ($field in $message.fields)
  ${messageName}.${field.fieldNumberName}_FIELD_NUMBER = $field.number;
#end

#foreach($oneOfDescriptor in $message.oneOfs)
#parse('oneof.vm')
#end

// Extensions start
#set ($extensions = $message.extensions)
#set ($enclosingTypeName = ${messageName})
#parse('extension.vm')
// Extensions end
#if ($message.hasMessageId())

/**
 * The JsPb id of this message type.
 * @const {string}
 */
${messageName}.messageId = $message.messageId;
#end

/**
 * @override
 * @struct
 * @final
 * @extends {proto_im_InternalMessage.Builder<!${messageName}, !${messageName}.Builder>}
 */
${messageName}.Builder = class extends proto_im_InternalMessage.Builder {

  /**
   * @param {!${messageName}} message
   * @private
   */
  constructor(message) {
    super(message);
  }

#foreach($field in $message.fields)
#if ($field.isMap())
#set ($mapViewType = $field.jsDoc)
#set ($key = $field.mapKey)
#set ($value = $field.mapValue)

#set ($internalMapValueType = $value.jsDoc)
#set ($lastParameter = "")

#if ($value.isMessage())
#set ($lastParameter = ",  $value.type.cycleSafeExpression")
#set ($internalMapValueType = "!proto_im_InternalMessage")
#end
#if ($value.isEnum())
#set ($internalMapValueType = "!number")
#end

#set ($putAllType = "!Map<${key.jsDoc}, ${value.jsDoc}>|${mapViewType}")
#set ($internalPutAllType = "!Map<${key.jsDoc},${internalMapValueType}>|!proto_im_MapView<${key.jsDoc},${internalMapValueType}>")

 /**
  * $!field.protoFileComments
  * @return {number}
#if ($field.isDeprecated())
  * @deprecated
#end
  */
 get${field.name}Count() {
   return this.message.get${field.name}Count();
 }

  /**
   * $!field.protoFileComments
   * @return {${mapViewType}}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  get${field.name}Map() {
    return this.message.get${field.name}Map();
  }

  /**
   * $!field.protoFileComments
   * @param {${key.jsDoc}} key
   * @param {${value.jsDoc}} defaultValue
   * @return {${value.jsDoc}}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  get${field.name}OrDefault(key, defaultValue) {
    return this.message.get${field.name}OrDefault(key, defaultValue);
  }

  /**
   * $!field.protoFileComments
   * @param {${key.jsDoc}} key
   * @return {${value.jsDoc}}
   * @throws Error if the key is not present in the map.
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  get${field.name}OrThrow(key) {
    return this.message.get${field.name}OrThrow(key);
  }

  /**
   * $!field.protoFileComments
   * @param {${key.jsDoc}} key
   * @return {boolean}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  contains${field.name}(key) {
    return this.message.contains${field.name}(key);
  }

  /**
   * $!field.protoFileComments
   * @param {${key.jsDoc}} key
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  remove${field.name}(key) {
    this.internal_removeMap${key.stem}Key${value.stem}Value(${field.number}, key${lastParameter});
    return this;
  }

  /**
   * $!field.protoFileComments
   * @param {${key.jsDoc}} key
   * @param {${value.jsDoc}} value
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  put${field.name}(key, value) {
    this.internal_putMap${key.stem}Key${value.stem}Value(${field.number}, key, value${lastParameter});
    return this;
  }

  /**
   * $!field.protoFileComments
   * @param {${putAllType}} entries
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  putAll${field.name}(entries) {
    this.internal_putAllMap${key.stem}Key${value.stem}Value(
        ${field.number},
        /** @type {${internalPutAllType}} */ (entries)${lastParameter});
    return this;
  }

#elseif ($field.isRepeated())
#set ($listType = $field.jsDoc)
#set ($elementType = $field.elementJsDoc)
#set ($elementSetType = "#if($field.isMessage())$elementType|${elementType}.Builder#{else}$elementType#end")
#set ($addAllType = "#if($field.isMessage())!Iterable<$elementType|${elementType}.Builder>#{else}!Iterable<$elementType>#end")
  /**
   * @return {number}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  get${field.name}Count() {
    return this.message.get${field.name}Count();
  }

  /**
   * @param {number} index
   * @return {${elementType}}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  get${field.name}(index) {
    return this.message.get${field.name}(index);
  }

  /**
   * $!field.protoFileComments
   * @return {${listType}}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  get${field.name}List() {
    return this.message.get${field.name}List();
  }

  /**
   * @param {number} index
   * @param {${elementSetType}} value
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  set${field.name}(index, value) {
    return this.internal_set${field.stem}Element($field.number, index, value);
  }

  /**
   * $!field.protoFileComments
   * @param {${elementSetType}} value
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  add${field.name}(value) {
    return this.internal_add${field.stem}Element($field.number, value);
  }

  /**
   * $!field.protoFileComments
   * @param {$addAllType} values
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  addAll${field.name}(values) {
    return this.internal_addAll${field.stem}Elements($field.number, values);
  }
#else
#set ($valueType = $field.jsDoc)
#set ($valueSetType = "#if($field.isMessage())$valueType|${valueType}.Builder#{else}$valueType#end")
  /**
   * @return {boolean}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  has${field.name}() {
    return this.message.has${field.name}();
  }

  /**
   * $!field.protoFileComments
   * @return {${valueType}}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  get${field.name}() {
    return this.message.get${field.name}();
  }

  /**
   * $!field.protoFileComments
   * @param {${valueSetType}} value
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  set${field.name}(value) {
#if ($field.isOneOf())
    this.internal_clear${field.oneOfName}();
#end
    return this.internal_set${field.stem}Field($field.number, value);
  }
#end

  /**
   * @return {!${messageName}.Builder}
#if ($field.isDeprecated())
   * @deprecated
#end
   */
  clear${field.name}() {
    return this.internal_clearField($field.number);
  }
#end

#foreach($oneOfDescriptor in $message.oneOfs)
  /**
   * @return {!$oneOfDescriptor.localTypeName}
   */
  get${oneOfDescriptor.simpleName}() {
    return this.message.get${oneOfDescriptor.simpleName}();
  }

  /**
   * @private
   */
  internal_clear${oneOfDescriptor.simpleName}() {
    this.internal_clearFields(#foreach ($field in $oneOfDescriptor.fields)$field.number#if ($foreach.hasNext),#end#end);
  }

#end

}

#end


## Render enums
#foreach($enumDescriptor in $descriptor.allEnums)
#parse ("enum.vm")
#end

exports = $descriptor.type.localName;
