#set ($keyField = $field.keyField)
#set ($valueField = $field.valueField)

@jsinterop.annotations.JsMethod(name = "get${field.jsName}Count")
public native int get${field.name}Count();

@jsinterop.annotations.JsMethod(name = "contains${field.jsName}")
public native boolean contains${field.name}(${keyField.unboxedType} key);

#if ($valueField.isEnum())
  @jsinterop.annotations.JsOverlay
  public final ${valueField.unboxedType} get${field.name}OrThrow(${keyField.unboxedType} key) {
    return #convertToEnum( $valueField "internal_get${field.jsName}OrThrow(key)");
  }

  @jsinterop.annotations.JsMethod(name = "get${field.jsName}OrThrow")
  private native Object internal_get${field.name}OrThrow(
      ${keyField.unboxedType} key);

  @jsinterop.annotations.JsOverlay
  public final ${valueField.unboxedType} get${field.name}OrDefault(
      ${keyField.unboxedType} key, ${valueField.unboxedType} defaultValue) {
    return #convertToEnum($valueField "internal_get${field.jsName}OrDefault(key, #convertToClosureEnum( $valueField 'defaultValue' ))");
  }

  @jsinterop.annotations.JsMethod(name = "get${field.jsName}OrDefault")
  private native Object internal_get${field.name}OrDefault(
      ${keyField.unboxedType} key, Object defaultValue);
#else
  @jsinterop.annotations.JsMethod(name = "get${field.jsName}OrThrow")
  public native ${valueField.unboxedType} get${field.name}OrThrow(
      ${keyField.unboxedType} key);

  @jsinterop.annotations.JsMethod(name = "get${field.jsName}OrDefault")
  public native ${valueField.unboxedType} get${field.name}OrDefault(
      ${keyField.unboxedType} key, ${valueField.unboxedType} defaultValue);
#end

@jsinterop.annotations.JsMethod(name = "get${field.jsName}Map")
private native com.google.protobuf.GeneratedMessageLite.Internal_.MapView<${keyField.jsBoxedType}, ${valueField.jsBoxedType}> internal_get${field.name}Map();

@jsinterop.annotations.JsOverlay
public final java.util.Map<${keyField.boxedType}, ${valueField.boxedType}> get${field.name}Map() {
  return com.google.protobuf.GeneratedMessageLite.Internal_.create${keyField.stem()}Keyed${valueField.stemForConvertedFields()}Map(
      internal_get${field.name}Map()#converterParams( $valueField ));
}

